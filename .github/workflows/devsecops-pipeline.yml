name: DevSecOps Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

env:
  ACR_REGISTRY: registry.cn-hangzhou.aliyuncs.com  # 阿里云容器镜像服务地址
  ACR_NAMESPACE: my-namespace                      # 替换为你的命名空间
  APP_NAME: devsecops-demo                         # 替换为你的应用名称
  K8S_NAMESPACE: default                           # Kubernetes 命名空间
  K8S_DEPLOYMENT: devsecops-demo                   # Kubernetes 部署名称

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 设置超时防止卡死
    outputs:
      scan-result: ${{ steps.scan-result.outputs.result }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'  # 启用pip缓存
      
      - name: Install dependencies
        run: pip install -r requirements.txt
        
      # SAST 静态应用安全测试
      - name: Run SAST with Bandit
        id: bandit-scan
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-report.json || echo "Bandit扫描完成（允许非零退出码）"
        continue-on-error: true
          
      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json
          
      # IaC 基础设施即代码扫描
      - name: Cache Trivy DB
        uses: actions/cache@v3
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ hashFiles('**/Dockerfile') }}
          
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
          
      - name: Trivy IaC Scan
        run: |
          trivy config --severity HIGH,CRITICAL . || echo "允许IaC扫描失败"
        continue-on-error: true
          
      # 容器镜像安全扫描
      - name: Build Docker Image
        run: docker build -t ${{ env.APP_NAME }}:${{ github.sha }} .
      
      - name: Trivy Container Scan
        run: |
          trivy image --severity HIGH,CRITICAL ${{ env.APP_NAME }}:${{ github.sha }} || echo "允许容器扫描失败"
        continue-on-error: true
          
      # 设置扫描结果
      - name: Set scan result
        id: scan-result
        run: echo "result=success" >> $GITHUB_OUTPUT

  build-and-push:
    name: Build & Push to ACR
    needs: security-scan
    if: ${{ needs.security-scan.outputs.scan-result == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Login to Aliyun ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      
      - name: Build and Push Docker Image
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64 \
            -t ${{ env.ACR_REGISTRY }}/${{ env.ACR_NAMESPACE }}/${{ env.APP_NAME }}:${{ github.sha }} \
            -t ${{ env.ACR_REGISTRY }}/${{ env.ACR_NAMESPACE }}/${{ env.APP_NAME }}:latest \
            --push .
          
      - name: Save image info
        run: echo "${{ env.ACR_REGISTRY }}/${{ env.ACR_NAMESPACE }}/${{ env.APP_NAME }}:${{ github.sha }}" > image.txt
      
      - name: Upload image info
        uses: actions/upload-artifact@v4
        with:
          name: image-info
          path: image.txt

  deploy-to-k8s:
    name: Deploy to Kubernetes
    needs: build-and-push
    if: ${{ github.ref == 'refs/heads/main' }}  # 仅 main 分支部署
    runs-on: ubuntu-latest
    environment: production  # 关联环境用于审计
    
    steps:
      - name: Download image info
        uses: actions/download-artifact@v4
        with:
          name: image-info
      
      - name: Get image tag
        id: set-image
        run: echo "IMAGE=$(cat image.txt)" >> $GITHUB_ENV
      
      - name: Configure Kubernetes
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
      
      - name: Deploy to Kubernetes
        run: |
          kubectl config set-context --current --namespace=${{ env.K8S_NAMESPACE }}
          kubectl apply -f deployment.yaml
          kubectl set image deployment/${{ env.K8S_DEPLOYMENT }} ${{ env.APP_NAME }}=${{ env.IMAGE }}
          kubectl rollout status deployment/${{ env.K8S_DEPLOYMENT }} --timeout=5m
          
      - name: Verify deployment
        run: |
          kubectl get pods -n ${{ env.K8S_NAMESPACE }} -o wide
          kubectl get svc -n ${{ env.K8S_NAMESPACE }}

  notification:
    name: Notification
    needs: 
      - security-scan
      - deploy-to-k8s
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Send workflow summary
        if: always()
        run: |
          echo "### DevSecOps Pipeline 执行结果" >> $GITHUB_STEP_SUMMARY
          echo "- **工作流状态**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **触发提交**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **镜像版本**: ${{ needs.build-and-push.outputs.image-tag || '未生成' }}" >> $GITHUB_STEP_SUMMARY
          
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.24.0
        if: failure()
        with:
          payload: |
            {
              "text": "❌ DevSecOps Pipeline 失败",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*${{ github.workflow }} 执行失败*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*仓库*: ${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*提交*: <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${GITHUB_SHA:0:7}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*失败作业*: ${{ join(needs.*.result, ', ') }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
